<?php namespace ProcessWire;

/*
 * WireMangaTheme
 *
 */
class WireMangaTheme extends Process {
	public function ___install() {
		parent::___install();
		require_once(__DIR__ . "/WireMangaThemeSetup.php");
		$wmtSetup = new WireMangaThemeSetup();
		$wmtSetup->install();
	}

	public function ___uninstall() {
		parent::___uninstall();
		if($this->input->post->wmt_clean_up) {
			require_once(__DIR__ . "/WireMangaThemeSetup.php");
			$wmtSetup = new WireMangaThemeSetup();
			$wmtSetup->uninstall();
		}
	}

	public function init() {
		$wmSettings = $this->wire("pages")->get("/settings/");
		$this->wire("settings", $wmSettings);
		$this->wire("wmt", $this);

		$this->wire()->addHookAfter("Pages::saveReady", $this, "cacheChapters");
		$this->wire()->addHookAfter("Pages::published", $this, "cacheChapters");
		$this->wire()->addHookAfter("Pages::unpublished", $this, "cacheChapters");
		$this->wire()->addHookAfter("Pages::published", $this, "sendChapterSubscriptionEmail");
		$this->wire()->addHookAfter("ProcessPageEdit::execute", $this, "renameChildrenTab");
		if($this->input->get->update === "WireMangaTheme") {
			$this->wire()->addHookBefore("ProcessModule::execute", $this, "changeModuleService");
		}

		if($this->input->post->wmt_update_template_files) {
			require_once(__DIR__ . "/WireMangaThemeSetup.php");
			$wmtSetup = new WireMangaThemeSetup();
			$wmtSetup->copyFiles($this->config->paths->siteModules . "WireMangaTheme/TemplateFiles/", $this->config->paths->templates);
			$this->input->post->wmt_update_template_files = 0;
		}
		if($this->input->post->wmt_clean_up && !$this->input->post->uninstall) {
			$this->input->post->wmt_clean_up = 0;
		}
	}

	public function upgrade($fromVersion, $toVersion) {
		$this->message("Upgraded from {$fromVersion} to {$toVersion}");
		//if( $toVersion > "0.0.5" ) {}
	}

	/**
	 * Cache chapters
  	 *
	 *  Regenerates chapters list cache when a manga or a chapter is saved in the back-end
	 *
	 * @param HookEvent $event
	 *
	 */
	public function cacheChapters(HookEvent $event) {
		$page = $event->arguments[0];
		$cache = $this->wire("cache");
		if($page->template->name === "wm_manga_single") {
			$cache->delete("chapters:" . $page->id);
			$cache->get("chapters:" . $page->id, $cache::expireNever, function() use($page) {
				return $this->chapterListMarkup($page);
			});
		} elseif($page->template->name === "wm_chapter") {
			$cache->delete("chapters:" . $page->parent->id);
			$cache->get("chapters:" . $page->parent->id, $cache::expireNever, function() use($page) {
				return $this->chapterListMarkup($page->parent);
			});
			$cache->delete("siblings:" . $page->parent->id);
		};
	}

	/** 
	 * Send an email to the subscribed users
	 * when a new chapter is available
	 *
	 * @param HookEvent $event
	 *
	 */
	public function sendChapterSubscriptionEmail(HookEvent $event) {
		$page = $event->arguments[0];
		if($page->template->name === "wm_chapter") {
			$subs = $page->parent->wm_manga_subs;
			foreach($subs as $sub) {
				$message  = "A new {$page->parent->title} chapter is available ";
				$message .= "<a href='{$page->httpUrl}'>{$page->parent->title} {$page->title} - {$this->wire("settings")->wm_site_name}</a>";
				// send email
				$mail = wireMail();
				$mail->to($sub->email);
				$mail->from($this->wire("settings")->wm_site_email);
				$mail->subject("{$this->wire("settings")->wm_site_name} - New {$page->parent->title} chapter {$page->title} is available");
				$mail->bodyHTML($message);
				$mail->send();
			}
		}
	}

	/**
	 * Chapters markup to cache
	 * used to cache chapters to keep the output consistent
	 *
	 * @param Page $page The page containing the chapters to cache
	 *
	 */
	public function chapterListMarkup(Page $page) {
		$chapters = $this->wire("settings")->wm_no_chapters;
		if($page->children->count) {
			$chapters = $this->chaptersList($page);
		}
		return $chapters;
	}
	
	public function renameChildrenTab(HookEvent $event) {
		$render = $event->return;
		$template_name = "wm_manga_single"; // Change this to match the exact template name of pages you want to apply tab-renaming to.
		if (false !== strpos($render, "template_{$template_name} ")) {
			$render = str_replace("Children</a>", "Chapters</a>", $render);
			$event->return = $render;
		}
	}

	public function changeModuleService(HookEvent $event) {
		if($this->input->get->update === "WireMangaTheme") {
			$this->wire("config")->moduleServiceURL = 'http://wiremanga.com/module/';
			$this->wire("config")->moduleServiceKey = (__NAMESPACE__ ? 'pw300' : 'pw280');
		}
	}

	/** 
	 * Get chapters list
	 *
	 * @param Page $page Page (manga) to get chapters from
	 *
	 * @return string
	 */
	public function chaptersList(Page $page) {
		$volOrder = "";
		$chOrder  = "";
		if($page->wm_sort_chapters == "2") {
			$volOrder = "-";
		}
		if($page->wm_sort_chapters == "3") {
			$volOrder = "-";
			$chOrder  = "-";
		}
		$chapters = $page->children->sort("{$chOrder}name");
		$prevChapter = "";
		$out = "";
		$x = 0;
		foreach($chapters->sort("{$volOrder}wm_chapter_volume") as $c) {
			if($c->wm_chapter_images->count === 0) {
				continue;
			}
			$volumeNumber = $c->wm_chapter_volume ? $c->wm_chapter_volume : "?";
			$currentChapter = $c->wm_chapter_volume;
			$volContainer = "";
			if($currentChapter != $prevChapter) {
				$volContainerClose = ($x === 0) ? "" : "</div></div>";
				$volContainer  = "{$volContainerClose}<div class='manga-volume'>";
				$volContainer .= "<div class='volume-header'>Volume {$volumeNumber}</div>";
				$volContainer .= "<div class='volume-chapters'>";
			}
			$chname = ($c->wm_chapter_name) ? " - {$c->wm_chapter_name}" : "";

			$out .= $volContainer;
			$out .= "<div class='chapter'><a href='{$c->url}' class='chapter-link'>Chapter {$c->title}{$chname}</a></div>";
			$prevChapter = $currentChapter;
			$x++;
		}
		if($volContainer){
			$out .= "</div></div>";
		}

		return $out;
	}
}